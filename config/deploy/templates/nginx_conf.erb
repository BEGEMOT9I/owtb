upstream puma_<%= fetch(:nginx_config_name) %> { <%
  flags = 'fail_timeout=0'
  @backends = [fetch(:puma_bind)].flatten.map do |m|
  etype, address  = /(tcp|unix|ssl):\/{1,2}(.+)/.match(m).captures
  if etype =='unix'
    "server #{etype}:#{address} #{fetch(:nginx_socket_flags)};"
  else
    "server #{address.gsub(/0\.0\.0\.0(.+)/, "127.0.0.1\\1")} #{fetch(:nginx_http_flags)};"
  end
end
%><% @backends.each do |server|  %>
  <%= server %><% end %>
}

<% fetch(:nginx_domains).each do |domain| %>

<% if fetch(:nginx_ssl) %>
server {
  listen 80;
  server_name <%= domain %>;
  return 301 https://<%= domain %>$request_uri;
}

server {
  listen 80;
  server_name  www.<%= domain %>;
  return 301 https://<%= domain %>$request_uri;
}

server {
  listen 443;
  ssl on;
  ssl_certificate     /etc/letsencrypt/live/<%= domain %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= domain %>/privkey.pem;
  server_name  www.<%= domain %>;
  return 301 https://<%= domain %>$request_uri;
}

<% else %>
server {
  listen 80;
  server_name  www.<%= domain %>;
  return 301 http://<%= domain %>$request_uri;
}
<% end %>

server {
<% if fetch(:nginx_ssl) %>
  listen 443;
  ssl on;
  ssl_stapling on;
  ssl_prefer_server_ciphers on;
  add_header Strict-Transport-Security "max-age=31536000;";
  add_header Content-Security-Policy-Report-Only "default-src https:; script-src https: 'unsafe-eval' 'unsafe-inline'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /csp-report";
  ssl_session_timeout 24h;
  ssl_session_cache shared:SSL:2m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
  resolver 127.0.0.1;
  ssl_certificate     /etc/letsencrypt/live/<%= domain %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= domain %>/privkey.pem;
<% else %>
  listen 80;
<% end %>

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 500 502 504 /500.html;
  error_page 503 @503;

  server_name <%= domain %>;
  root <%= current_path %>/public;
  try_files $uri/index.html $uri @puma_<%= fetch(:nginx_config_name) %>;

  location @puma_<%= fetch(:nginx_config_name) %> {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    <% if fetch(:nginx_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
    <% end %>
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    # limit_req zone=one;
    access_log <%= shared_path %>/log/nginx.access.log;
    error_log <%= shared_path %>/log/nginx.error.log;
  }

  location ~ ^\/(service-worker).js {
    add_header Cache-Control no-cache, no-store, must-revalidate;
  }

  location ~ ^\/(assets|uploads|webpack|static).* {
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/octet-stream application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }


  location @405 {
    return 404;
  }

  location @503 {
    error_page 405 = /maintenance.html;
    if (-f $document_root/maintenance.html) {
      rewrite ^(.*)$ /maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/maintenance.html) {
    return 503;
  }
}
<% end %>
